{
  "openapi": "3.0.0",
  "info": {
    "description": "This is sample documentation for the boilerplate.",
    "version": "0.0.1",
    "title": "Boilerplate Documentation",
    "contact": {
      "email": "user@domain.com"
    }
  },
  "tags": [
    {
      "name": "user",
      "description": "Access to users"
    },
    {
      "name": "records",
      "description": "Access to sensor record readings"
    },
    {
      "name": "device",
      "description": "Access to devices being used in studies"
    },
    {
      "name": "survey-question",
      "description": "Access to survey questions for studies"
    }
  ],
  "paths": {
    "/records": {
      "post": {
        "tags": [
          "records"
        ],
        "summary": "Post multiple sensor records",
        "operationId": "postRecords",
        "parameters": {
          "key": {
            "name": "API key",
            "type": "string"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "platform": {
                    "type": "string",
                    "example": "android"
                  },
                  "type": {
                    "type": "string",
                    "description": "Sensor type",
                    "example": "accelerometer"
                  },
                  "records": {
                    "type": "string",
                    "example": "some_base_64_encoded_string",
                    "description": "This is the base64 encoded string of the encrypted sensor records. The data should just be an array of sensor records."
                  },
                  "clientId": {
                    "type": "string",
                    "name": "Client ID",
                    "description": "Unique client ID for each device",
                    "example": "LWEH3823-2343FSD23-12SDF2-H3J5H"
                  },
                  "key": {
                    "type": "string",
                    "name": "API key"
                  },
                  "dataSize": {
                    "type": "number",
                    "example": 23451,
                    "description": "Size of the base64 decoded, unecnrypted data (in bytes)"
                  },
                  "numRecords": {
                    "type": "number",
                    "example": 734,
                    "description": "The number of records in the array being uploaded."
                  },
                  "startTime": {
                    "type": "number",
                    "example": 1541523552,
                    "description": "Timestamp (unix timestamp) of the time the first record in the bunch was recorded."
                  },
                  "endTime": {
                    "type": "number",
                    "example": 1541583552,
                    "description": "Timestamp (unix timestamp) of the time the last record in the bunch was recorded."
                  }
                },
                "required": [
                  "records",
                  "platform"
                ]
              }
            }
          }
        }
      }
    },
    "/users": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Create a new user",
        "description": "",
        "operationId": "createUser",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "example": "testuser@domain.com"
                  },
                  "username": {
                    "type": "string",
                    "example": "testuser"
                  }
                },
                "required": [
                  "email",
                  "username"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully created user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Whether the creation was successful or not"
                    },
                    "generatedPassword": {
                      "type": "string",
                      "description": "Password generated for the user",
                      "example": "23oihf9283hf203ijf2io3jf"
                    }
                  },
                  "required": [
                    "success"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/user/{userId}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get user by user name",
        "operationId": "getUserById",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Database ID of the user to be fetched",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully got user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Delete user by ID",
        "operationId": "deleteUserById",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Database ID of the user to be deleted",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/verify-auth": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Verify that a user's API key/token is valid",
        "description": "",
        "operationId": "verifyAuth",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Database ID of the user to be deleted",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully verified user"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/login": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Login user",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "example": "testuser@domain.com"
                  },
                  "password": {
                    "type": "string",
                    "example": "bestpassw0RdEver1337"
                  }
                },
                "required": [
                  "email",
                  "password"
                ]
              }
            }
          }
        }
      }
    },
    "/user/password": {
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Change a user's password",
        "description": "",
        "operationId": "changePassword",
        "parameters": [
          {
            "name": "currentPassword",
            "in": "query",
            "description": "User's current password",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "newPassword",
            "in": "query",
            "description": "User's new password",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully changed user's password"
          },
          "400": {
            "description": "Invalid new password entered"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/device/register": {
      "post": {
        "tags": [
          "device"
        ],
        "summary": "Register a new device using a user's registration code",
        "operationId": "registerDevice",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "registrationCode": {
                    "type": "string",
                    "example": "WEIOKD"
                  },
                  "deviceName": {
                    "type": "string",
                    "example": "iPhone X",
                    "description": "Name of the device"
                  },
                  "osVersion": {
                    "type": "string",
                    "example": "12.0.1",
                    "description": "iOS or Android version"
                  },
                  "platform": {
                    "type": "string",
                    "example": "ios",
                    "description": "Should be either \"ios\" or \"android\""
                  }
                },
                "required": [
                  "registrationCode",
                  "deviceName",
                  "osVersion",
                  "platform"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful registration, will contain clientId",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "clientId": {
                      "type": "string",
                      "example": "7afd0910-0ced-4dac-94b3-4a3bed941ef7"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/survey-question/answer": {
      "post": {
        "tags": [
          "survey-question"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "clientId": {
                    "type": "string",
                    "example": "7d6e8fab-085c-4f7b-a842-370367ed8847"
                  },
                  "surveyQuestionId": {
                    "type": "integer",
                    "example": 23,
                    "description": "Internal survey question ID being answered. We will create a mapping prior to deploying the app."
                  },
                  "answer": {
                    "type": "string",
                    "example": "Yes, things hurt a bit",
                    "description": "Answer to the survey question. Will always be a string."
                  },
                  "timeToAnswer": {
                    "type": "integer",
                    "example": 2345,
                    "description": "How long it took the user to answer the question. Time from being shown the answer to submitting the answer. Should be measured in ms."
                  }
                },
                "required": [
                  "clientId",
                  "surveyQuestionId",
                  "answer",
                  "timeToAnswer"
                ]
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "User": {
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "username": {
            "type": "string",
            "example": "testuser"
          },
          "email": {
            "type": "string",
            "example": "testuser@domain.com"
          },
          "loginAttempts": {
            "type": "integer",
            "example": 2
          },
          "locked": {
            "type": "boolean",
            "example": false
          },
          "apiKey": {
            "type": "string",
            "example": "2388h2hI129jJH3j4ngsiej23k4"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "lastLogin": {
            "type": "string",
            "format": "date-time"
          }
        }
      }
    }
  }
}